(gdb) b phase_5
Breakpoint 3 at 0x40107b
(gdb) disas phase_5
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq  
 
End of assembler dump.
(gdb) x/s 0x4025b7
0x4025b7:	"%d %d"
(gdb) r sol.txt
Starting program: /home/sonam/Downloads/Assignment 1_2 (1)/Assignment 1/bomb002/bomb sol.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
1 4294966790
Halfway there!
24 2
So you got that one.  Try this one.
5 5

Breakpoint 3, 0x000000000040107b in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
=> 0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi       //it reads input formate where it accpets 2 integer values ("%d %d")
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax       //compare 1 with value in register %eax(2)
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>  //since 2 is greater than 1,it will escape and it will jump to address 48 
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax      //here user input(%rsp) is move and store in register %eax.
   0x00000000004010ae <+51>:	and    $0xf,%eax       //AND operation is being performed
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax     //0xf = 15 is being compared with 1 
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>     //since it is not equal it will escape the explode bomb
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx  //value 0 is move and stored in register %ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx   //value 0 is move and stored in register %edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx    //value 1 is added to edx, where edx will be 1+0=1;
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx      //eax value is add to value of ecx
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax    //0xf=15 is compared with the value of eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>   //jump at  +72 ,untill the value of  eax is equal to 15, then it will jump to next line
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)    //15 is stored in rsp
   0x00000000004010dd <+98>:	cmp    $0xf,%edx      // 15 is compared with rdx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>   // if it is not equal it will explode a bomb, which indicate that our first input is incorrect
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx    // compare second term  with the value of %ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>  //  if it is equal it will escape the bomb, else bomb will explode
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq  
End of assembler dump.
(gdb) u*0x00000000004010a1
0x00000000004010a1 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x7fffffffdf28      140737488346920
rcx            0x0                 0
rdx            0x7fffffffde14      140737488346644
rsi            0x0                 0
rdi            0x7fffffffd7c0      140737488345024
rbp            0x0                 0x0
rsp            0x7fffffffde10      0x7fffffffde10
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f61ac0      140737353489088
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf20      140737488346912
r14            0x0                 0
r15            0x0                 0
rip            0x4010a1            0x4010a1 <phase_5+38>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0
(gdb) u*0x00000000004010b4
0x00000000004010b4 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax                 // compared 1 with the value of eax(2);
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>     // since 2 is greater than 1 ,it will escape the bomb  and moved to +48 address;
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
=> 0x00000000004010b4 <+57>:	cmp    $0xf,%eax      //0xf= 15 is compared with eax(15)
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>   // since it is equal it will escape the bomb; 
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx    // 0 is stored at %ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx    // 0 is stored at %edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx    //value 1 is added with edx, edx=1+0=1
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
(gdb) i r
rax            0x5                 5
rbx            0x7fffffffdf28      140737488346920
rcx            0x0                 0
rdx            0x7fffffffde14      140737488346644
rsi            0x0                 0
rdi            0x7fffffffd7c0      140737488345024
rbp            0x0                 0x0
rsp            0x7fffffffde10      0x7fffffffde10
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f61ac0      140737353489088
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf20      140737488346912
r14            0x0                 0
r15            0x0                 0
rip            0x4010b4            0x4010b4 <phase_5+57>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0
(gdb) u*0x00000000004010d1
0x00000000004010d1 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax   //  0x402440(,%rax,4) = 12; 12 is stored at eax;
   0x00000000004010cf <+84>:	add    %eax,%ecx
--Type <RET> for more, q to quit, c to continue without paging--
=> 0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>   // until and unless the value of %eax == 15, the loop will stop; it will move to next instruction
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)     //15 is stored at (%rsp) 
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
(gdb) i r
rax            0xc                 12
rbx            0x7fffffffdf28      140737488346920
rcx            0xc                 12
rdx            0x1                 1
rsi            0x0                 0
rdi            0x7fffffffd7c0      140737488345024
rbp            0x0                 0x0
rsp            0x7fffffffde10      0x7fffffffde10
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f61ac0      140737353489088
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf20      140737488346912
r14            0x0                 0
r15            0x0                 0
rip            0x4010d1            0x4010d1 <phase_5+86>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0
(gdb) u*0x00000000004010dd
0x00000000004010dd in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
=> 0x00000000004010dd <+98>:	cmp    $0xf,%edx   //  15 is compared with the value of %edx , until and unless the value of edx == 15 ,it will move to next line
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>   // value of %edx can be obtain by changing the first input , range of first input must be less than 15
   0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx   //  second term is compared with value of %ecx = 115 ; if the second term gets matches, it will escape the bomb
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
(gdb) i r
rax            0xf                 15
rbx            0x7fffffffdf28      140737488346920
rcx            0x73                115
rdx            0xf                 15
rsi            0x0                 0
rdi            0x7fffffffd7c0      140737488345024
rbp            0x0                 0x0
rsp            0x7fffffffde10      0x7fffffffde10
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f61ac0      140737353489088
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf20      140737488346912
r14            0x0                 0
r15            0x0                 0
rip            0x4010dd            0x4010dd <phase_5+98>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0
(gdb) u*0x00000000004010e2
0x00000000004010e2 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:	sub    $0x18,%rsp
   0x000000000040107f <+4>:	mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:	xor    %eax,%eax
   0x000000000040108f <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:	mov    %rsp,%rdx
   0x0000000000401097 <+28>:	mov    $0x4025b7,%esi
   0x000000000040109c <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:	cmp    $0x1,%eax
   0x00000000004010a4 <+41>:	jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:	callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:	mov    (%rsp),%eax
   0x00000000004010ae <+51>:	and    $0xf,%eax
   0x00000000004010b1 <+54>:	mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:	cmp    $0xf,%eax
   0x00000000004010b7 <+60>:	je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:	mov    $0x0,%ecx
   0x00000000004010be <+67>:	mov    $0x0,%edx
   0x00000000004010c3 <+72>:	add    $0x1,%edx
   0x00000000004010c6 <+75>:	cltq   
   0x00000000004010c8 <+77>:	mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:	add    %eax,%ecx
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010d1 <+86>:	cmp    $0xf,%eax
   0x00000000004010d4 <+89>:	jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:	movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:	cmp    $0xf,%edx
   0x00000000004010e0 <+101>:	jne    0x4010e8 <phase_5+109>
=> 0x00000000004010e2 <+103>:	cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:	je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:	callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:	mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:	xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:	je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:	add    $0x18,%rsp
   0x0000000000401106 <+139>:	retq   
End of assembler dump.
(gdb) i r
rax            0xf                 15
rbx            0x7fffffffdf28      140737488346920
rcx            0x73                115
rdx            0xf                 15           
rsi            0x0                 0
rdi            0x7fffffffd7c0      140737488345024
rbp            0x0                 0x0
rsp            0x7fffffffde10      0x7fffffffde10
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f61ac0      140737353489088
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf20      140737488346912
r14            0x0                 0
r15            0x0                 0
rip            0x4010e2            0x4010e2 <phase_5+103>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
gs             0x0                 0
(gdb) d
Delete all breakpoints? (y or n) y
(gdb) r sol.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/sonam/Downloads/Assignment 1_2 (1)/Assignment 1/bomb002/bomb sol.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
1 4294966790
Halfway there!
24 2
So you got that one.  Try this one.
5 115                      
Good work!  On to the next...
               //phase5 is successfully defused with 5 and 115 as answer to the given input 5 and 5

