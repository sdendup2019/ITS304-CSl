Phase 1 defused. How about the next one?
1 2 3 4 5 6

Breakpoint 3, 0x0000000000400ea9 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
=> 0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp  //makes a stack frame of 56 bytes
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>  //We see that this phase wants an input of 6 numbers.
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)   // We are comparing something here!
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx     //Comparing something here!
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp    // closing the stack frame
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) u* 0x0000000000400ec7
0x0000000000400ec7 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
=> 0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) i r
rax            0x6                 6
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7fffffffde84      140737488346756
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x0                 0x0
rsp            0x7fffffffde70      0x7fffffffde70
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f61ac0      140737353489088
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdfa0      140737488347040
r14            0x0                 0
r15            0x0                 0
rip            0x400ec7            0x400ec7 <phase_2+30>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--c
gs             0x0                 0
(gdb) x/s 0x7fffffffde70
0x7fffffffde70:	"\001"
(gdb) x/s $rsp
0x7fffffffde70:	"\001"
(gdb) ni
0x0000000000400ecb in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
=> 0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
=> 0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400ed2 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
=> 0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) i r
rax            0x6                 6
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7fffffffde84      140737488346756
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x0                 0x0
rsp            0x7fffffffde70      0x7fffffffde70
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f61ac0      140737353489088
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdfa0      140737488347040
r14            0x0                 0
r15            0x0                 0
rip            0x400ed2            0x400ed2 <phase_2+41>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--c
gs             0x0                 0
(gdb) ni
0x0000000000400ed5 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
=> 0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) i r
rax            0x6                 6
rbx            0x7fffffffde70      140737488346736
rcx            0x0                 0
rdx            0x7fffffffde84      140737488346756
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x0                 0x0
rsp            0x7fffffffde70      0x7fffffffde70
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f61ac0      140737353489088
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdfa0      140737488347040
r14            0x0                 0
r15            0x0                 0
rip            0x400ed5            0x400ed5 <phase_2+44>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--c
gs             0x0                 0
(gdb) u* 0x0000000000400ede
0x0000000000400ede in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
=> 0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x7fffffffde70      140737488346736
rcx            0x0                 0
rdx            0x7fffffffde84      140737488346756
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x7fffffffde84      0x7fffffffde84
rsp            0x7fffffffde70      0x7fffffffde70
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f61ac0      140737353489088
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdfa0      140737488347040
r14            0x0                 0
r15            0x0                 0
rip            0x400ede            0x400ede <phase_2+53>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--c
gs             0x0                 0
(gdb) x/d 0x7fffffffde74
0x7fffffffde74:	2
(gdb) ni
0x0000000000400ee1 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
=> 0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400ee8 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
=> 0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x7fffffffde70      140737488346736
rcx            0x0                 0
rdx            0x7fffffffde84      140737488346756
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x7fffffffde84      0x7fffffffde84
rsp            0x7fffffffde70      0x7fffffffde70
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f61ac0      140737353489088
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdfa0      140737488347040
r14            0x0                 0
r15            0x0                 0
rip            0x400ee8            0x400ee8 <phase_2+63>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--c
gs             0x0                 0
(gdb) x/d 0x7fffffffde70
0x7fffffffde70:	1
(gdb) ni
0x0000000000400eec in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
=> 0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x7fffffffde74      140737488346740
rcx            0x0                 0
rdx            0x7fffffffde84      140737488346756
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x7fffffffde84      0x7fffffffde84
rsp            0x7fffffffde70      0x7fffffffde70
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f61ac0      140737353489088
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdfa0      140737488347040
r14            0x0                 0
r15            0x0                 0
rip            0x400eec            0x400eec <phase_2+67>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--c
gs             0x0                 0
(gdb) x/d 0x7fffffffde84
0x7fffffffde84:	6
(gdb) ni
0x0000000000400eef in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
=> 0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400eda in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
=> 0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400edc in phase_2 ()
(gdb) i r
rax            0x2                 2
rbx            0x7fffffffde74      140737488346740
rcx            0x0                 0
rdx            0x7fffffffde84      140737488346756
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x7fffffffde84      0x7fffffffde84
rsp            0x7fffffffde70      0x7fffffffde70
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f61ac0      140737353489088
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdfa0      140737488347040
r14            0x0                 0
r15            0x0                 0
rip            0x400edc            0x400edc <phase_2+51>
eflags         0x287               [ CF PF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--c
gs             0x0                 0
(gdb) x/d 0x7fffffffde74
0x7fffffffde74:	2
(gdb) ni
0x0000000000400ede in phase_2 ()
(gdb) ni
0x0000000000400ee1 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
=> 0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) i r
rax            0x4                 4
rbx            0x7fffffffde74      140737488346740
rcx            0x0                 0
rdx            0x7fffffffde84      140737488346756
rsi            0x0                 0
rdi            0x7fffffffd800      140737488345088
rbp            0x7fffffffde84      0x7fffffffde84
rsp            0x7fffffffde70      0x7fffffffde70
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f61ac0      140737353489088
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdfa0      140737488347040
r14            0x0                 0
r15            0x0                 0
rip            0x400ee1            0x400ee1 <phase_2+56>
eflags         0x297               [ CF PF AF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--c
gs             0x0                 0
(gdb) x/d 0x7fffffffde74
0x7fffffffde74:	2
(gdb) ni
0x0000000000400ee3 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
=> 0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) ni

//Looking at <+30>, we see we are essentially doubling whatever was in %eax before when %eax = 4, which was 2. lets change our input to 
//"1 2 4 5 6 7" to see if we can pass this iteration for 4. ==> when we do this, adding 4 DOES pass this iteration of the loop. At this
//point, we can see at <+30> that we are doubling the previous %eax each time. So assuming this, lets try "1 2 4 8 16 32" as our input

Breakpoint 4, 0x0000000000401438 in explode_bomb ()
(gdb) delete
Delete all breakpoints? (y or n) y
(gdb) b phase_3
Breakpoint 5 at 0x400f0d
(gdb) b explode_bomb
Breakpoint 6 at 0x401438
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/sonam/Desktop/bomb002/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
